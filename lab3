import time
from collections import deque

# --- Вспомогательные функции ---

def create_circle_array(N, M):
    # Создаем список мышей: 'G' - серая, 'W' - белая
    return ['G'] * N + ['W'] * M

def create_circle_linkedlist(N, M):
    # Создаем связный список из мышей
    class Node:
        def __init__(self, val):
            self.val = val
            self.next = None

    head = None
    prev = None
    for val in ['G'] * N + ['W'] * M:
        node = Node(val)
        if head is None:
            head = node
        else:
            prev.next = node
        prev = node
    prev.next = head  # замыкаем круг
    return head

# --- А) Через массив (список) ---
def cat_eats_array(N, M, S, K, L):
    circle = create_circle_array(N, M)
    # Найдем индекс первой серой мыши
    start = circle.index('G')
    idx = start
    count_g = N
    count_w = M

    while count_g > K or count_w > L:
        # Считаем S-1 мышь, т.к. текущая считается за 1
        steps = 0
        while steps < S - 1:
            idx = (idx + 1) % len(circle)
            steps += 1
        # idx указывает на S-ю мышь - съедаем её
        eaten = circle.pop(idx)
        if eaten == 'G':
            count_g -= 1
        else:
            count_w -= 1
        # idx теперь указывает на следующую мышь после съеденной, так как pop сдвигает список
        if idx == len(circle):
            idx = 0
        # Если список пуст - выходим
        if len(circle) == 0:
            break
    return circle

# --- Б) Через связанный список ---
def cat_eats_linkedlist(N, M, S, K, L):
    class Node:
        def __init__(self, val):
            self.val = val
            self.next = None

    # Создаем круг
    head = None
    prev = None
    for val in ['G'] * N + ['W'] * M:
        node = Node(val)
        if head is None:
            head = node
        else:
            prev.next = node
        prev = node
    prev.next = head  # замыкаем круг

    # Найдем первую серую мышь
    current = head
    while current.val != 'G':
        current = current.next

    count_g = N
    count_w = M

    while count_g > K or count_w > L:
        # Считаем S-1 мышь
        for _ in range(S - 2):
            current = current.next
        # Удаляем S-ю мышь (следующую за current)
        to_remove = current.next
        if to_remove.val == 'G':
            count_g -= 1
        else:
            count_w -= 1
        # Удаляем узел
        current.next = to_remove.next
        current = current.next  # следующий после удаленного
        # Если удалили всех - выходим
        if count_g == K and count_w == L:
            break

    # Собираем результат в список для вывода
    result = []
    start = current
    result.append(start.val)
    node = start.next
    while node != start:
        result.append(node.val)
        node = node.next
    return result

# --- В) С использованием стандартной библиотеки (deque) ---
def cat_eats_deque(N, M, S, K, L):
    circle = deque(['G'] * N + ['W'] * M)
    # Найдем индекс первой серой мыши
    idx = 0
    for i, val in enumerate(circle):
        if val == 'G':
            idx = i
            break
    # Повернем deque так, чтобы первая серая мышь была в начале
    circle.rotate(-idx)

    count_g = N
    count_w = M

    while count_g > K or count_w > L:
        # Считаем S-1 мышь: сдвигаем влево S-1 раз
        circle.rotate(-(S - 1))
        # Удаляем S-ю мышь (теперь в начале)
        eaten = circle.popleft()
        if eaten == 'G':
            count_g -= 1
        else:
            count_w -= 1
    return list(circle)

# --- Тест и сравнение ---

def test_and_benchmark():
    N = 10
    M = 10
    S = 3
    K = 5
    L = 5

    print("Исходные данные:")
    print(f"Серых: {N}, Белых: {M}, Съедаем каждую S-ю: {S}")
    print(f"Осталось серых: {K}, белых: {L}\n")

    start = time.time()
    res_a = cat_eats_array(N, M, S, K, L)
    t_a = time.time() - start
    print(f"А) Массив: {res_a}, время: {t_a:.6f} сек")

    start = time.time()
    res_b = cat_eats_linkedlist(N, M, S, K, L)
    t_b = time.time() - start
    print(f"Б) Связанный список: {res_b}, время: {t_b:.6f} сек")

    start = time.time()
    res_c = cat_eats_deque(N, M, S, K, L)
    t_c = time.time() - start
    print(f"В) deque: {res_c}, время: {t_c:.6f} сек")

if __name__ == "__main__":
    test_and_benchmark()
    
